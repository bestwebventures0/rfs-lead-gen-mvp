# Name of your application. Used to uniquely configure containers.
service: staging-app

# Name of the container image.
image: riafinstaging/staging-app

# Deploy to these servers.
servers:
  web:
    hosts:
      - 64.23.154.113
    labels:
      traefik.http.routers.staging-app.rule: Host(`staging.riafin.com`)
      traefik.http.routers.staging-app_secure.entrypoints: websecure
      traefik.http.routers.staging-app_secure.rule: Host(`staging.riafin.com`)
      traefik.http.routers.staging-app_secure.tls: true
      traefik.http.routers.staging-app_secure.tls.certresolver: letsencrypt

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: riafinstaging
  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  # clear:
  #   DB_HOST: 192.168.0.2
  secret:
    - RAILS_MASTER_KEY
  #  - LITESTACK_DATA_PATH # uncomment only when trying to use /db

# Use a different Dockerfile
builder:
  dockerfile: Dockerfile.staging

volumes:
  - "/storage:/rails/storage"
  # - "/db:/rails/db/staging" # /db gives `Errno::EACCES: Permission denied @ dir_s_mkdir - /db (Errno::EACCES)` error while running kamal setup -d staging
  - "db:/rails/db/staging"

# Setup ssl cert (https)
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    certificatesResolvers.letsencrypt.acme.email: "staging@riafin.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web